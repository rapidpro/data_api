# -*- coding: utf-8 -*-
# Generated by Django 1.9.13 on 2018-06-11 10:43
from __future__ import unicode_literals

import data_api.staging.ingestion
import data_api.staging.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Boundary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('created_on', models.DateTimeField(blank=True, null=True)),
                ('modified_on', models.DateTimeField(blank=True, null=True)),
                ('osm_id', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('level', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='BoundaryRef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('osm_id', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin),
        ),
        migrations.CreateModel(
            name='Broadcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('rapidpro_id', models.PositiveIntegerField()),
                ('urns', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('text', models.TextField()),
                ('created_on', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('archived', models.BooleanField(default=False)),
                ('created_on', models.DateTimeField()),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='CampaignEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('offset', models.IntegerField()),
                ('unit', models.CharField(max_length=100)),
                ('delivery_hour', models.IntegerField()),
                ('message', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField()),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Campaign')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(max_length=100)),
                ('country', models.CharField(max_length=100)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('created_on', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='ChannelEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('rapidpro_id', models.PositiveIntegerField()),
                ('type', models.CharField(blank=True, max_length=100, null=True)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('occurred_on', models.DateTimeField()),
                ('created_on', models.DateTimeField()),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Channel')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('language', models.CharField(blank=True, max_length=100, null=True)),
                ('urns', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None)),
                ('fields', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('blocked', models.NullBooleanField()),
                ('stopped', models.NullBooleanField()),
                ('created_on', models.DateTimeField(blank=True, null=True)),
                ('modified_on', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_status', models.CharField(max_length=100)),
                ('power_source', models.CharField(max_length=100)),
                ('power_level', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=100)),
                ('network_type', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin),
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=100)),
                ('label', models.CharField(max_length=100)),
                ('value_type', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Flow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('name', models.CharField(max_length=100)),
                ('archived', models.BooleanField(default=False)),
                ('expires', models.IntegerField(blank=True, null=True)),
                ('created_on', models.DateTimeField(blank=True, null=True)),
                ('modified_on', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='FlowStart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('restart_participants', models.BooleanField()),
                ('status', models.CharField(max_length=100)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('created_on', models.DateTimeField(blank=True, null=True)),
                ('modified_on', models.DateTimeField(blank=True, null=True)),
                ('contacts', models.ManyToManyField(to='staging.Contact')),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Flow')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Geometry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=100)),
                ('coordinates', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None), size=None), size=None), default=list, size=None)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('name', models.CharField(max_length=100)),
                ('query', models.CharField(blank=True, max_length=100, null=True)),
                ('count', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField()),
                ('name', models.CharField(max_length=100)),
                ('count', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('rapidpro_id', models.PositiveIntegerField()),
                ('broadcast', models.PositiveIntegerField(blank=True, null=True)),
                ('urn', models.CharField(max_length=100)),
                ('direction', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=100)),
                ('visibility', models.CharField(max_length=100)),
                ('text', models.TextField()),
                ('created_on', models.DateTimeField()),
                ('modified_on', models.DateTimeField(blank=True, null=True)),
                ('sent_on', models.DateTimeField(blank=True, null=True)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='staging.Channel')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Contact')),
                ('labels', models.ManyToManyField(to='staging.Label')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_token', models.CharField(max_length=40)),
                ('server', models.CharField(default=b'https://app.rapidpro.io/', max_length=100)),
                ('is_active', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('primary_language', models.CharField(blank=True, max_length=100, null=True)),
                ('languages', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=None)),
                ('credits', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('timezone', models.CharField(blank=True, max_length=100, null=True)),
                ('date_style', models.CharField(blank=True, max_length=100, null=True)),
                ('anon', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Resthook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('resthook', models.CharField(max_length=100)),
                ('created_on', models.DateTimeField()),
                ('modified_on', models.DateTimeField()),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='ResthookEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('resthook', models.CharField(max_length=100)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('created_on', models.DateTimeField()),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='ResthookSubscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('rapidpro_id', models.PositiveIntegerField()),
                ('resthook', models.CharField(max_length=100)),
                ('target_url', models.CharField(max_length=100)),
                ('created_on', models.DateTimeField()),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Run',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_synced', models.DateTimeField(auto_now_add=True)),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('rapidpro_id', models.PositiveIntegerField()),
                ('responded', models.BooleanField()),
                ('created_on', models.DateTimeField()),
                ('modified_on', models.DateTimeField()),
                ('exited_on', models.DateTimeField(blank=True, null=True)),
                ('exit_type', models.CharField(max_length=100)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Contact')),
                ('flow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Flow')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization')),
                ('start', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='staging.FlowStart')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin, data_api.staging.ingestion.RapidproAPIBaseModel),
        ),
        migrations.CreateModel(
            name='Runs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.IntegerField(default=0)),
                ('completed', models.IntegerField(default=0)),
                ('expired', models.IntegerField(default=0)),
                ('interrupted', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin),
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node', models.CharField(max_length=100)),
                ('time', models.DateTimeField()),
                ('run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='path', to='staging.Run')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin),
        ),
        migrations.CreateModel(
            name='SyncCheckpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_name', models.CharField(max_length=100)),
                ('subcollection_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_started', models.DateTimeField()),
                ('last_saved', models.DateTimeField(blank=True, null=True)),
                ('is_running', models.BooleanField(default=False)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100)),
                ('value', models.TextField()),
                ('category', models.CharField(max_length=100)),
                ('node', models.CharField(max_length=100)),
                ('time', models.DateTimeField()),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, data_api.staging.models.RapidproCreateableModelMixin),
        ),
        migrations.AddField(
            model_name='run',
            name='values',
            field=data_api.staging.models.MappedManyToManyField(to='staging.Value'),
        ),
        migrations.AddField(
            model_name='message',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='label',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='group',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='flowstart',
            name='groups',
            field=models.ManyToManyField(to='staging.Group'),
        ),
        migrations.AddField(
            model_name='flowstart',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='flow',
            name='labels',
            field=models.ManyToManyField(to='staging.Label'),
        ),
        migrations.AddField(
            model_name='flow',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='flow',
            name='runs',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='staging.Runs'),
        ),
        migrations.AddField(
            model_name='field',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='contact',
            name='groups',
            field=models.ManyToManyField(to='staging.Group'),
        ),
        migrations.AddField(
            model_name='contact',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='channelevent',
            name='contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Contact'),
        ),
        migrations.AddField(
            model_name='channelevent',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='channel',
            name='device',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='staging.Device'),
        ),
        migrations.AddField(
            model_name='channel',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='campaignevent',
            name='flow',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='staging.Flow'),
        ),
        migrations.AddField(
            model_name='campaignevent',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Group'),
        ),
        migrations.AddField(
            model_name='campaign',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='broadcast',
            name='contacts',
            field=models.ManyToManyField(to='staging.Contact'),
        ),
        migrations.AddField(
            model_name='broadcast',
            name='groups',
            field=models.ManyToManyField(to='staging.Group'),
        ),
        migrations.AddField(
            model_name='broadcast',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='boundary',
            name='geometry',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='staging.Geometry'),
        ),
        migrations.AddField(
            model_name='boundary',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='staging.Organization'),
        ),
        migrations.AddField(
            model_name='boundary',
            name='parent',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='staging.BoundaryRef'),
        ),
        migrations.AlterUniqueTogether(
            name='synccheckpoint',
            unique_together=set([('organization', 'collection_name', 'subcollection_name')]),
        ),
    ]
